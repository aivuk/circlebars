// Generated by CoffeeScript 1.6.3
(function() {
  var chartHeight, circleDistance, circleRadius, eixos, eixosColor, filterColumns, metas, numbers,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  numbers = [[1, 2], [2], [4, 5, 6]];

  chartHeight = 600;

  circleRadius = 20;

  circleDistance = 10;

  metas = {};

  eixos = {};

  filterColumns = ["educacao", "saude"];

  eixosColor = ["#34b746", "#4b2bbf", "#ff7f00"];

  d3.csv("/data/metas.csv", function(d) {
    var chart, eixosSize, f, filterFunc, filtersDiv, groups, i, maxHeight, ms, o, _fn, _fn1, _i, _j, _len, _len1, _results;
    d.forEach(function(r) {
      var _ref;
      if (metas[r['objetivo']] != null) {
        metas[r['objetivo']].push(r);
      } else {
        metas[r['objetivo']] = [r];
      }
      if (eixos[r['eixo']] != null) {
        if (_ref = r['objetivo'], __indexOf.call(eixos[r['eixo']], _ref) < 0) {
          return eixos[r['eixo']].push(r['objetivo']);
        }
      } else {
        return eixos[r['eixo']] = [r['objetivo']];
      }
    });
    eixosSize = [];
    _fn = function(i) {
      return eixosSize.push(eixos[i].length);
    };
    for (i in eixos) {
      _fn(i);
    }
    maxHeight = Math.max.apply(Math, (function() {
      var _results;
      _results = [];
      for (o in metas) {
        ms = metas[o];
        _results.push(ms.length);
      }
      return _results;
    })());
    chartHeight = maxHeight * (2 * circleRadius + 2 * circleDistance);
    chart = d3.select("#circlebars").style("height", parseInt(chartHeight) + "px").append("svg:svg").attr("width", "100%").attr("height", "100%");
    groups = {};
    for (_i = 0, _len = filterColumns.length; _i < _len; _i++) {
      f = filterColumns[_i];
      groups[f] = [];
    }
    _fn1 = function(ms) {
      return ms.forEach(function(m, i) {
        var _j, _len1;
        for (_j = 0, _len1 = filterColumns.length; _j < _len1; _j++) {
          f = filterColumns[_j];
          if (m[f] === "TRUE") {
            groups[f].push(m['id']);
          }
        }
        console.log(groups);
        return chart.append("svg:circle").attr("class", "circ").attr("cy", chartHeight - (i * (2 * circleRadius + circleDistance)) - 2 * circleRadius).attr("cx", (parseInt(o) - 1) * (2 * circleRadius + circleDistance) + circleDistance + circleRadius).attr("r", circleRadius).attr("fill", function(state) {
          if (m['estado'] === "concluída") {
            return "red";
          } else {
            return eixosColor[m['eixo'] - 1];
          }
        }).attr("class", "circ").attr("id", "circ-" + m['id']).on("mouseover", function() {
          d3.select(this).transition().attr("fill", "white").attr("stroke", "#444").attr("stroke-width", "4");
          return d3.select("#metaInfo").text(m['texto']);
        }).on("mouseout", function() {
          d3.select(this).transition().attr("fill", function(state) {
            if (m['estado'] === "concluída") {
              return "red";
            } else {
              return eixosColor[m['eixo'] - 1];
            }
          }).attr("stroke-width", "0");
          return d3.select("#metaInfo").text('');
        });
      });
    };
    for (o in metas) {
      ms = metas[o];
      _fn1(ms);
    }
    filterFunc = function(g) {
      return function() {
        var c, _j, _len1, _ref, _results;
        d3.selectAll(".filtered").classed("filtered", false);
        _ref = groups[g];
        _results = [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          c = _ref[_j];
          _results.push(d3.select("#circ-" + c).classed("filtered", function() {
            return !d3.select(this).classed("filtered");
          }));
        }
        return _results;
      };
    };
    filtersDiv = d3.select("#filters");
    _results = [];
    for (_j = 0, _len1 = filterColumns.length; _j < _len1; _j++) {
      f = filterColumns[_j];
      _results.push(filtersDiv.append("div").text(f).on("click", filterFunc(f)));
    }
    return _results;
  });

}).call(this);
